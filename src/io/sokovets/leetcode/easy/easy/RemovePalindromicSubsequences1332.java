package io.sokovets.leetcode.easy.easy;

/*
You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters
of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.
 */
public class RemovePalindromicSubsequences1332 {

    public static void main(String[] args) {
        /**
         * "ababa"
         * "abb"
         * "baabb"
         */

        String s = "ababa";
//                  ^
//                   ^
//
//        0...4
//         1..4
//        0..3.

        //System.out.println(new RemovePalindromicSubsequences1332().removePalindromeSub("abbaaaab"));
        System.out.println(new RemovePalindromicSubsequences1332().removePalindromeSub("bbaabaaa"));
//        System.out.println(new RemovePalindromicSubsequences1332().removePalindromeSub("abb"));
//        System.out.println(new RemovePalindromicSubsequences1332().removePalindromeSub("ababb"));
//        System.out.println(new RemovePalindromicSubsequences1332().removePalindromeSub("baabb"));
    }

    //"ababb";
    // ^   ^


    public int removePalindromeSub(String s) {
        //Так как у нас всего две символа а и б, то мы сначала можем удалить все а символы получить остаток все б.
        //В лучшем случае если палиндром то всего потребуется 1 удаление чтобы получить пустую строку, либо 2

        if (isPalindrome(0, s.length() - 1, s)) {
            return 1;
        } else {
            return 2;
        }
    }

    boolean isPalindrome(int l, int r, String s) {
        while (r < l) {
            if (s.charAt(r) != s.charAt(l)) {
                return false;
            }
            r++;
            l--;
        }
        return true;
    }

}
