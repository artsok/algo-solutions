package io.sokovets.yandex.backend.autumn;


import java.util.Scanner;

/**
 * Алиса Селезнева была невероятно счастлива: она наконец запустила свой новый стартап по распознаванию увиденных облаков, который назвала строкой
 * A
 * длины
 * N
 * . Но вдруг она узнала, что Зелибоба также запустил свой стартап по распознаванию облаков и назвал его строкой
 * B
 * длины
 * N
 * .
 * Алиса уверена, что Зелибоба сплагиатил её идею! Для начала она хочет вычислить метрику похожести названий их стартапов — если название будет похоже, то ей будет сильно проще в дальнейших доказательствах и разбирательствах.
 * Более формально, пусть есть строки
 * A
 * — название стартапа Алисы и строка
 * B
 * — название стартапа Зелибобы. Обе строки имеют одинаковую длину
 * N
 * . Для каждой позиции
 * 1
 * ≤
 * i
 * ≤
 * N
 * строки
 * B
 * , нужно вычислить тип совпадения в этой позиции со строкой
 * A
 * .
 * Если
 * B
 * i
 * =
 * A
 * i
 * , то в позиции
 * i
 * тип совпадения должен быть равен P (от слова plagiarism).
 * Если
 * B
 * i
 * ≠
 * A
 * i
 * , но существует другая позиция
 * 1
 * ≤
 * j
 * ≤
 * N
 * , такая что
 * B
 * i
 * =
 * A
 * j
 * , то в позиции
 * i
 * тип совпадения должен быть равен S (от слова suspicious).
 * Обратите внимание:
 * <p>
 * Буквы в рамках одной строки могут повторяться.
 * Каждую букву строки
 * A
 * можно использовать не более чем в одном совпадении типа plagiarism или suspicious.
 * Предпочтение всегда отдается типу plagiarism.
 * В случае совпадения типа suspicious, предпочтение всегда отдается самой левой позиции в строке
 * A
 * .
 * В остальных позициях тип совпадения должен быть равен I (от слова innocent).
 * <p>
 * Формат ввода
 * В первой строке задана строка
 * A
 * (
 * 1
 * ≤
 * ∣
 * ∣
 * A
 * ∣
 * ∣
 * ≤
 * 1
 * 0
 * 6
 * ) — название стартапа, выбранное Алисой.
 * Во второй строке задана строка
 * B
 * (
 * |
 * B
 * |
 * =
 * |
 * A
 * |
 * ) — название стартапа Зелибобы.
 * Гарантируется, что строки
 * A
 * и
 * B
 * содержат только заглавные латинские буквы.
 * <p>
 * Формат вывода
 * Выведите единственную строку
 * C
 * (
 * |
 * C
 * |
 * =
 * |
 * B
 * |
 * )
 * , где
 * C
 * i
 * — тип совпадения символа
 * B
 * i
 * (
 * 1
 * ≤
 * i
 * ≤
 * |
 * B
 * |
 * )
 * :
 * для типа plagiarism
 * C
 * i
 * =
 * P.
 * для типа suspicious
 * C
 * i
 * =
 * S.
 * для типа innocent
 * C
 * i
 * =
 * I.
 * Пример 1
 * Ввод	Вывод
 * CLOUD
 * CUPID
 * PSIIP
 * Пример 2
 * Ввод	Вывод
 * ALICE
 * ELIBO
 * SPPII
 * Пример 3
 * Ввод	Вывод
 * ABCBCYA
 * ZBBACAA
 * IPSSPIP
 */
public class Совпадение_Не_думаю {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String A = scan.nextLine();
        String B = scan.nextLine();


        //String A = "ALICE";
        //String B = "ELIBO";


        char[] charsA = A.toCharArray();
        char[] charsB = B.toCharArray();

        StringBuilder sb = new StringBuilder();

        boolean flag = false;

        for (int i = 0; i < charsB.length; i++) {

            if (charsB[i] != charsA[i]) {

                for (int j = 0; j < charsB.length; j++) {

                    if (charsB[i] == charsA[j] && charsA[j] != 'Я' && charsB[j] != charsA[j]) {
                        sb.append("S");
                        charsA[j] = 'Я';
                        flag = true;
                        break;
                    }
                }

                //Если не нашли совпадений
                if (!flag) {
                    sb.append("I");
                }

            } else {
                sb.append("P");
                charsA[i] = 'Я';
            }

            //Сбрасываем состояние
            flag = false;
        }

        System.out.println(sb.toString());
    }
}
